
Master_Amit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000005ae  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001937  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000baf  00000000  00000000  00002127  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f6  00000000  00000000  00002cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  000036cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e6  00000000  00000000  000038b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c37  00000000  00000000  0000409a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  8a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WriteChannel>:

#include "DIO.h"

void DIO_WriteChannel(DIO_ChannelTypes ChannelId , STD_LevelTypes level){
	DIO_PortTypes Portx = (ChannelId/8);
	DIO_ChannelTypes ChannelPos = (ChannelId%8);
  92:	98 2f       	mov	r25, r24
  94:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
  96:	86 95       	lsr	r24
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	21 f1       	breq	.+72     	; 0xe8 <DIO_WriteChannel+0x56>
  a0:	30 f0       	brcs	.+12     	; 0xae <DIO_WriteChannel+0x1c>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	f1 f1       	breq	.+124    	; 0x122 <DIO_WriteChannel+0x90>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	09 f4       	brne	.+2      	; 0xac <DIO_WriteChannel+0x1a>
  aa:	58 c0       	rjmp	.+176    	; 0x15c <DIO_WriteChannel+0xca>
  ac:	08 95       	ret
		case DIO_PortA:
		if(level==STD_High){
  ae:	61 30       	cpi	r22, 0x01	; 1
  b0:	69 f4       	brne	.+26     	; 0xcc <DIO_WriteChannel+0x3a>
			SetBit(PORTA_Reg,ChannelPos);
  b2:	4b b3       	in	r20, 0x1b	; 27
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_WriteChannel+0x2e>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	9a 95       	dec	r25
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_WriteChannel+0x2a>
  c4:	cb 01       	movw	r24, r22
  c6:	84 2b       	or	r24, r20
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	08 95       	ret
		}
		else{
			ClearBit(PORTA_Reg,ChannelPos);
  cc:	4b b3       	in	r20, 0x1b	; 27
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_WriteChannel+0x48>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	9a 95       	dec	r25
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_WriteChannel+0x44>
  de:	cb 01       	movw	r24, r22
  e0:	80 95       	com	r24
  e2:	84 23       	and	r24, r20
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret
		
		  break ;
		
		case DIO_PortB:
		
		if(level==STD_High){
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <DIO_WriteChannel+0x74>
			SetBit(PORTB_Reg,ChannelPos);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_WriteChannel+0x68>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_WriteChannel+0x64>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret
		}
		else{
			ClearBit(PORTB_Reg,ChannelPos);
 106:	48 b3       	in	r20, 0x18	; 24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_WriteChannel+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	9a 95       	dec	r25
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_WriteChannel+0x7e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		}
		
		
		break ;
		case DIO_PortC:
		if(level==STD_High){
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	69 f4       	brne	.+26     	; 0x140 <DIO_WriteChannel+0xae>
			SetBit(PORTC_Reg,ChannelPos);
 126:	45 b3       	in	r20, 0x15	; 21
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_WriteChannel+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	9a 95       	dec	r25
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_WriteChannel+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	84 2b       	or	r24, r20
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	08 95       	ret
		}
		else{
			ClearBit(PORTC_Reg,ChannelPos);
 140:	45 b3       	in	r20, 0x15	; 21
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	b9 01       	movw	r22, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_WriteChannel+0xbc>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	9a 95       	dec	r25
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_WriteChannel+0xb8>
 152:	cb 01       	movw	r24, r22
 154:	80 95       	com	r24
 156:	84 23       	and	r24, r20
 158:	85 bb       	out	0x15, r24	; 21
 15a:	08 95       	ret
		}
		
		
		break ;
		case DIO_PortD:
		if(level==STD_High){
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	69 f4       	brne	.+26     	; 0x17a <DIO_WriteChannel+0xe8>
			SetBit(PORTD_Reg,ChannelPos);
 160:	42 b3       	in	r20, 0x12	; 18
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	b9 01       	movw	r22, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_WriteChannel+0xdc>
 16a:	66 0f       	add	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	9a 95       	dec	r25
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_WriteChannel+0xd8>
 172:	cb 01       	movw	r24, r22
 174:	84 2b       	or	r24, r20
 176:	82 bb       	out	0x12, r24	; 18
 178:	08 95       	ret
		}
		else{
		       ClearBit(PORTD_Reg,ChannelPos);
 17a:	42 b3       	in	r20, 0x12	; 18
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	b9 01       	movw	r22, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_WriteChannel+0xf6>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	9a 95       	dec	r25
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_WriteChannel+0xf2>
 18c:	cb 01       	movw	r24, r22
 18e:	80 95       	com	r24
 190:	84 23       	and	r24, r20
 192:	82 bb       	out	0x12, r24	; 18
 194:	08 95       	ret

00000196 <DIO_Init>:
	{Output,STD_High},
	{Output,STD_High},
	
};

void DIO_Init(){
 196:	e1 e6       	ldi	r30, 0x61	; 97
 198:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_PortTypes Portx ;
	DIO_ChannelTypes ChannelPos ;
	Unit8 Count =0;
	for(Count=DIO_ChannelA0 ;Count<PINCOUNT;Count++)
 19a:	80 e0       	ldi	r24, 0x00	; 0
			if(PinCFG[Count].level==Output)
			{
				SetBit(DDRB_Reg,ChannelPos);
			}
			else{
				ClearBit(DDRB_Reg,ChannelPos);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	50 e0       	ldi	r21, 0x00	; 0
	DIO_ChannelTypes ChannelPos ;
	Unit8 Count =0;
	for(Count=DIO_ChannelA0 ;Count<PINCOUNT;Count++)
	{
		Portx =Count/8;
		ChannelPos =Count%8;
 1a0:	28 2f       	mov	r18, r24
 1a2:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 1a4:	98 2f       	mov	r25, r24
 1a6:	96 95       	lsr	r25
 1a8:	96 95       	lsr	r25
 1aa:	96 95       	lsr	r25
 1ac:	91 30       	cpi	r25, 0x01	; 1
 1ae:	09 f1       	breq	.+66     	; 0x1f2 <DIO_Init+0x5c>
 1b0:	30 f0       	brcs	.+12     	; 0x1be <DIO_Init+0x28>
 1b2:	92 30       	cpi	r25, 0x02	; 2
 1b4:	c1 f1       	breq	.+112    	; 0x226 <DIO_Init+0x90>
 1b6:	93 30       	cpi	r25, 0x03	; 3
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_Init+0x26>
 1ba:	4f c0       	rjmp	.+158    	; 0x25a <DIO_Init+0xc4>
 1bc:	67 c0       	rjmp	.+206    	; 0x28c <DIO_Init+0xf6>
			case DIO_PortA:
			if(PinCFG[Count].level==Output)
 1be:	90 81       	ld	r25, Z
 1c0:	91 30       	cpi	r25, 0x01	; 1
 1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg,ChannelPos);
 1c4:	9a b3       	in	r25, 0x1a	; 26
 1c6:	ba 01       	movw	r22, r20
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_Init+0x38>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	2a 95       	dec	r18
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_Init+0x34>
 1d2:	9b 01       	movw	r18, r22
 1d4:	29 2b       	or	r18, r25
 1d6:	2a bb       	out	0x1a, r18	; 26
 1d8:	59 c0       	rjmp	.+178    	; 0x28c <DIO_Init+0xf6>
			}
			else{
				ClearBit(DDRA_Reg,ChannelPos);
 1da:	3a b3       	in	r19, 0x1a	; 26
 1dc:	ba 01       	movw	r22, r20
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_Init+0x4e>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_Init+0x4a>
 1e8:	96 2f       	mov	r25, r22
 1ea:	90 95       	com	r25
 1ec:	93 23       	and	r25, r19
 1ee:	9a bb       	out	0x1a, r25	; 26
 1f0:	4d c0       	rjmp	.+154    	; 0x28c <DIO_Init+0xf6>
			}
			break;
			case DIO_PortB:
			if(PinCFG[Count].level==Output)
 1f2:	90 81       	ld	r25, Z
 1f4:	91 30       	cpi	r25, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg,ChannelPos);
 1f8:	97 b3       	in	r25, 0x17	; 23
 1fa:	ba 01       	movw	r22, r20
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_Init+0x6c>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_Init+0x68>
 206:	9b 01       	movw	r18, r22
 208:	29 2b       	or	r18, r25
 20a:	27 bb       	out	0x17, r18	; 23
 20c:	3f c0       	rjmp	.+126    	; 0x28c <DIO_Init+0xf6>
			}
			else{
				ClearBit(DDRB_Reg,ChannelPos);
 20e:	37 b3       	in	r19, 0x17	; 23
 210:	ba 01       	movw	r22, r20
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_Init+0x82>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_Init+0x7e>
 21c:	96 2f       	mov	r25, r22
 21e:	90 95       	com	r25
 220:	93 23       	and	r25, r19
 222:	97 bb       	out	0x17, r25	; 23
 224:	33 c0       	rjmp	.+102    	; 0x28c <DIO_Init+0xf6>
			}
			break;
			case DIO_PortC:
			if(PinCFG[Count].level==Output)
 226:	90 81       	ld	r25, Z
 228:	91 30       	cpi	r25, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg,ChannelPos);
 22c:	94 b3       	in	r25, 0x14	; 20
 22e:	ba 01       	movw	r22, r20
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_Init+0xa0>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	2a 95       	dec	r18
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_Init+0x9c>
 23a:	9b 01       	movw	r18, r22
 23c:	29 2b       	or	r18, r25
 23e:	24 bb       	out	0x14, r18	; 20
 240:	25 c0       	rjmp	.+74     	; 0x28c <DIO_Init+0xf6>
			}
			else{
				ClearBit(DDRC_Reg,ChannelPos);
 242:	34 b3       	in	r19, 0x14	; 20
 244:	ba 01       	movw	r22, r20
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_Init+0xb6>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_Init+0xb2>
 250:	96 2f       	mov	r25, r22
 252:	90 95       	com	r25
 254:	93 23       	and	r25, r19
 256:	94 bb       	out	0x14, r25	; 20
 258:	19 c0       	rjmp	.+50     	; 0x28c <DIO_Init+0xf6>
			}
			break;
			case DIO_PortD:
			if(PinCFG[Count].level==Output)
 25a:	90 81       	ld	r25, Z
 25c:	91 30       	cpi	r25, 0x01	; 1
 25e:	59 f4       	brne	.+22     	; 0x276 <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg,ChannelPos);
 260:	91 b3       	in	r25, 0x11	; 17
 262:	ba 01       	movw	r22, r20
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_Init+0xd4>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	2a 95       	dec	r18
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_Init+0xd0>
 26e:	9b 01       	movw	r18, r22
 270:	29 2b       	or	r18, r25
 272:	21 bb       	out	0x11, r18	; 17
 274:	0b c0       	rjmp	.+22     	; 0x28c <DIO_Init+0xf6>
			}
			else{
				ClearBit(DDRD_Reg,ChannelPos);
 276:	31 b3       	in	r19, 0x11	; 17
 278:	ba 01       	movw	r22, r20
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_Init+0xea>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	2a 95       	dec	r18
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_Init+0xe6>
 284:	96 2f       	mov	r25, r22
 286:	90 95       	com	r25
 288:	93 23       	and	r25, r19
 28a:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	DIO_PortTypes Portx ;
	DIO_ChannelTypes ChannelPos ;
	Unit8 Count =0;
	for(Count=DIO_ChannelA0 ;Count<PINCOUNT;Count++)
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	32 96       	adiw	r30, 0x02	; 2
 290:	80 32       	cpi	r24, 0x20	; 32
 292:	09 f0       	breq	.+2      	; 0x296 <DIO_Init+0x100>
 294:	85 cf       	rjmp	.-246    	; 0x1a0 <DIO_Init+0xa>
			}
			break;
		}
	}
	
}
 296:	08 95       	ret

00000298 <LCD_Cmd>:
     LCD_Cmd (0x40 + (loc*8));  /* Command 0x40 and onwards forces           
                                       the device to point CGRAM address */
       for(i=0;i<8;i++)  /* Write 8 byte for generation of 1 character */       //LCD هنا تم استخدام الريجستر الخاص بمجموعة  تخزين داخل 
           LCD_SendChar(msg[i]);      
    }   
}
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
 29c:	8b b3       	in	r24, 0x1b	; 27
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	9c 2f       	mov	r25, r28
 2a2:	90 7f       	andi	r25, 0xF0	; 240
 2a4:	89 2b       	or	r24, r25
 2a6:	8b bb       	out	0x1b, r24	; 27
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	89 e0       	ldi	r24, 0x09	; 9
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	8b e0       	ldi	r24, 0x0B	; 11
 2b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 2b8:	8f e8       	ldi	r24, 0x8F	; 143
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_Cmd+0x24>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_Cmd+0x2a>
 2c2:	00 00       	nop
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	8b e0       	ldi	r24, 0x0B	; 11
 2c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 2cc:	8f ed       	ldi	r24, 0xDF	; 223
 2ce:	9e e2       	ldi	r25, 0x2E	; 46
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCD_Cmd+0x38>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCD_Cmd+0x3e>
 2d6:	00 00       	nop
 2d8:	8b b3       	in	r24, 0x1b	; 27
 2da:	28 2f       	mov	r18, r24
 2dc:	2f 70       	andi	r18, 0x0F	; 15
 2de:	30 e1       	ldi	r19, 0x10	; 16
 2e0:	c3 9f       	mul	r28, r19
 2e2:	c0 01       	movw	r24, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	82 2b       	or	r24, r18
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	89 e0       	ldi	r24, 0x09	; 9
 2ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	8b e0       	ldi	r24, 0x0B	; 11
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 2fa:	8f e8       	ldi	r24, 0x8F	; 143
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_Cmd+0x66>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_Cmd+0x6c>
 304:	00 00       	nop
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	8b e0       	ldi	r24, 0x0B	; 11
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	9f e1       	ldi	r25, 0x1F	; 31
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_Cmd+0x7a>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_Cmd+0x80>
 318:	00 00       	nop
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <LCD_Init>:
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	89 ef       	ldi	r24, 0xF9	; 249
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <LCD_Init+0x6>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_Init+0x10>
 32e:	00 00       	nop
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	8a e0       	ldi	r24, 0x0A	; 10
 334:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 338:	83 e3       	ldi	r24, 0x33	; 51
 33a:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 33e:	2f ef       	ldi	r18, 0xFF	; 255
 340:	82 e5       	ldi	r24, 0x52	; 82
 342:	97 e0       	ldi	r25, 0x07	; 7
 344:	21 50       	subi	r18, 0x01	; 1
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <LCD_Init+0x26>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_Init+0x30>
 34e:	00 00       	nop
 350:	82 e3       	ldi	r24, 0x32	; 50
 352:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 356:	88 e2       	ldi	r24, 0x28	; 40
 358:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 362:	8c e0       	ldi	r24, 0x0C	; 12
 364:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 36e:	8f e3       	ldi	r24, 0x3F	; 63
 370:	9f e1       	ldi	r25, 0x1F	; 31
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <LCD_Init+0x54>
 376:	00 c0       	rjmp	.+0      	; 0x378 <LCD_Init+0x5a>
 378:	00 00       	nop
 37a:	08 95       	ret

0000037c <LCD_SendChar>:
 37c:	cf 93       	push	r28
 37e:	c8 2f       	mov	r28, r24
 380:	8b b3       	in	r24, 0x1b	; 27
 382:	8f 70       	andi	r24, 0x0F	; 15
 384:	9c 2f       	mov	r25, r28
 386:	90 7f       	andi	r25, 0xF0	; 240
 388:	89 2b       	or	r24, r25
 38a:	8b bb       	out	0x1b, r24	; 27
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	89 e0       	ldi	r24, 0x09	; 9
 390:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	8b e0       	ldi	r24, 0x0B	; 11
 398:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 39c:	8f e8       	ldi	r24, 0x8F	; 143
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_SendChar+0x24>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_SendChar+0x2a>
 3a6:	00 00       	nop
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	8b e0       	ldi	r24, 0x0B	; 11
 3ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 3b0:	8f e3       	ldi	r24, 0x3F	; 63
 3b2:	9f e1       	ldi	r25, 0x1F	; 31
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_SendChar+0x38>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_SendChar+0x3e>
 3ba:	00 00       	nop
 3bc:	8b b3       	in	r24, 0x1b	; 27
 3be:	28 2f       	mov	r18, r24
 3c0:	2f 70       	andi	r18, 0x0F	; 15
 3c2:	30 e1       	ldi	r19, 0x10	; 16
 3c4:	c3 9f       	mul	r28, r19
 3c6:	c0 01       	movw	r24, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	82 2b       	or	r24, r18
 3cc:	8b bb       	out	0x1b, r24	; 27
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	89 e0       	ldi	r24, 0x09	; 9
 3d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	8b e0       	ldi	r24, 0x0B	; 11
 3da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 3de:	8f e8       	ldi	r24, 0x8F	; 143
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <LCD_SendChar+0x66>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <LCD_SendChar+0x6c>
 3e8:	00 00       	nop
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	8b e0       	ldi	r24, 0x0B	; 11
 3ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WriteChannel>
 3f2:	8f e3       	ldi	r24, 0x3F	; 63
 3f4:	9f e1       	ldi	r25, 0x1F	; 31
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_SendChar+0x7a>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_SendChar+0x80>
 3fc:	00 00       	nop
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <LCD_SendString>:
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	fc 01       	movw	r30, r24
 40a:	80 81       	ld	r24, Z
 40c:	88 23       	and	r24, r24
 40e:	59 f0       	breq	.+22     	; 0x426 <LCD_SendString+0x24>
 410:	8f 01       	movw	r16, r30
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_SendChar>
 418:	cf 5f       	subi	r28, 0xFF	; 255
 41a:	f8 01       	movw	r30, r16
 41c:	ec 0f       	add	r30, r28
 41e:	f1 1d       	adc	r31, r1
 420:	80 81       	ld	r24, Z
 422:	81 11       	cpse	r24, r1
 424:	f7 cf       	rjmp	.-18     	; 0x414 <LCD_SendString+0x12>
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <LCD_Clear>:
void LCD_Clear(){
	LCD_Cmd(0x01);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 434:	08 95       	ret

00000436 <main>:
#include "stdlib.h" //using to convert from int to char

char string[50];
int shift ;
int main(void)
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	e4 97       	sbiw	r28, 0x34	; 52
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
	char string[50];
	DIO_Init();
 44a:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_Init>
	LCD_Init();
 44e:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_Init>
	
	Uart_Init();
 452:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Uart_Init>
	SPI_InitType InitData ={Master,MSB};
 456:	1b aa       	std	Y+51, r1	; 0x33
 458:	1c aa       	std	Y+52, r1	; 0x34
	SPI_Init(&InitData);
 45a:	ce 01       	movw	r24, r28
 45c:	c3 96       	adiw	r24, 0x33	; 51
 45e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <SPI_Init>
	Slave_EN();
 462:	c4 98       	cbi	0x18, 4	; 24
	while (1)
	{
		
		
		
		data=SPI_TxRx(0xAA);
 464:	8a ea       	ldi	r24, 0xAA	; 170
 466:	0e 94 77 02 	call	0x4ee	; 0x4ee <SPI_TxRx>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 46a:	4a e0       	ldi	r20, 0x0A	; 10
 46c:	be 01       	movw	r22, r28
 46e:	6f 5f       	subi	r22, 0xFF	; 255
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 a0 02 	call	0x540	; 0x540 <__itoa_ncheck>
		itoa(data ,string,10);
		LCD_SendString(string);
 478:	ce 01       	movw	r24, r28
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	0e 94 01 02 	call	0x402	; 0x402 <LCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	81 ee       	ldi	r24, 0xE1	; 225
 484:	94 e0       	ldi	r25, 0x04	; 4
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <main+0x50>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <main+0x5a>
 490:	00 00       	nop
		_delay_ms(100);
		LCD_Clear();
 492:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_Clear>
		
		
	    
		Uart_TxString("temp=");
 496:	80 ea       	ldi	r24, 0xA0	; 160
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 8a 02 	call	0x514	; 0x514 <Uart_TxString>
		Uart_TxString(string);
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	0e 94 8a 02 	call	0x514	; 0x514 <Uart_TxString>
		Uart_TxString("\r\n");
 4a6:	86 ea       	ldi	r24, 0xA6	; 166
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 8a 02 	call	0x514	; 0x514 <Uart_TxString>
 4ae:	2f ef       	ldi	r18, 0xFF	; 255
 4b0:	81 ee       	ldi	r24, 0xE1	; 225
 4b2:	94 e0       	ldi	r25, 0x04	; 4
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <main+0x7e>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <main+0x88>
 4be:	00 00       	nop
 4c0:	d1 cf       	rjmp	.-94     	; 0x464 <main+0x2e>

000004c2 <SPI_Init>:

#include "SPI.h"


void SPI_Init(SPI_InitType * InitData){
	switch (InitData->status){                                 //if we not using SPI_INitType we using the Status instead of InitData->status
 4c2:	fc 01       	movw	r30, r24
 4c4:	80 81       	ld	r24, Z
 4c6:	88 23       	and	r24, r24
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <SPI_Init+0xe>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	51 f0       	breq	.+20     	; 0x4e2 <SPI_Init+0x20>
 4ce:	08 95       	ret
		
		case Master:
		DDRB |= ((1<<SCK)|(1<<MOSI)|(1<<ss));
 4d0:	87 b3       	in	r24, 0x17	; 23
 4d2:	80 6b       	ori	r24, 0xB0	; 176
 4d4:	87 bb       	out	0x17, r24	; 23
		DDRB &=~ (1<<MISO);
 4d6:	be 98       	cbi	0x17, 6	; 23
		Slave_DIS();
 4d8:	ac 9a       	sbi	0x15, 4	; 21
		//SPCR |= ((1<<SPE)|(1<<MSTR));          //  (1<<SPE) This bit must be set to enable any SPI operations.&Bit 4 – MSTR: Master/Slave Select
		//SPI->SPI_SPCR=((1<<SPE)|(1<<MSTR));     // to acsecs the data in struct using with type struct 
		/*{SPI->SPI_SPCR.SMSTR=1;    //if we using typedef of SPI_SPCRType we using it instead of SPI->SPI_SPCR=((1<<SPE)|(1<<MSTR));and SPCR |= ((1<<SPE)|(1<<MSTR));
		SPI->SPI_SPCR.SSPIE =1;}*/
		 SPI->SPI_SPCR.AllReg = 0x10;               //using with Typedef union to access register all bit it is the same as SPI->SPI_SPCR=((1<<MSTR));
 4da:	80 e1       	ldi	r24, 0x10	; 16
 4dc:	8d b9       	out	0x0d, r24	; 13
		 SPI->SPI_SPCR.Bits.SSPE =1;           //her we can access bit by bit in register her we set bit enable  
 4de:	6e 9a       	sbi	0x0d, 6	; 13
		
		
		break;
 4e0:	08 95       	ret
		
		case salve:
		DDRB |= ((1<<MISO));
 4e2:	be 9a       	sbi	0x17, 6	; 23
		DDRB &=~ ((1<<SCK)|(1<<MOSI)|(1<<ss));
 4e4:	87 b3       	in	r24, 0x17	; 23
 4e6:	8f 74       	andi	r24, 0x4F	; 79
 4e8:	87 bb       	out	0x17, r24	; 23
		SPCR |= (1<<SPE);
 4ea:	6e 9a       	sbi	0x0d, 6	; 13
 4ec:	08 95       	ret

000004ee <SPI_TxRx>:
	}
	
}

unsigned char SPI_TxRx(unsigned char data){
	SPDR =data;                         //Transmit operation 
 4ee:	8f b9       	out	0x0f, r24	; 15
	//while(!((SPSR>>SPIF)&1));          //   Bit 7 – SPIF: SPI Interrupt Flag this flag mutual between receive and transmit 
	while(SPI->SPI_SPSR.SSPIF ==0);     //we using with typedef SPI_SPSR instead of while(!((SPSR>>SPIF)&1));
 4f0:	77 9b       	sbis	0x0e, 7	; 14
 4f2:	fe cf       	rjmp	.-4      	; 0x4f0 <SPI_TxRx+0x2>
	
	return SPDR  ;                     //SPI Data Register – this recieve value 
 4f4:	8f b1       	in	r24, 0x0f	; 15
 4f6:	08 95       	ret

000004f8 <Uart_Init>:
	
}
  char Uart_RxChar (){
	while(((UCSRA >> RXC)&1) == 0);  // • Bit 7 – RXC: USART Receive Complete
	return UDR ;
}
 4f8:	8a b1       	in	r24, 0x0a	; 10
 4fa:	88 61       	ori	r24, 0x18	; 24
 4fc:	8a b9       	out	0x0a, r24	; 10
 4fe:	80 b5       	in	r24, 0x20	; 32
 500:	86 68       	ori	r24, 0x86	; 134
 502:	80 bd       	out	0x20, r24	; 32
 504:	87 e6       	ldi	r24, 0x67	; 103
 506:	89 b9       	out	0x09, r24	; 9
 508:	10 bc       	out	0x20, r1	; 32
 50a:	08 95       	ret

0000050c <Uart_TxChar>:
 50c:	5d 9b       	sbis	0x0b, 5	; 11
 50e:	fe cf       	rjmp	.-4      	; 0x50c <Uart_TxChar>
 510:	8c b9       	out	0x0c, r24	; 12
 512:	08 95       	ret

00000514 <Uart_TxString>:
void Uart_TxString(char * string){
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(string[i] !='\0'){
 51c:	80 81       	ld	r24, Z
 51e:	88 23       	and	r24, r24
 520:	59 f0       	breq	.+22     	; 0x538 <Uart_TxString+0x24>
 522:	8f 01       	movw	r16, r30
 524:	c0 e0       	ldi	r28, 0x00	; 0
		Uart_TxChar(string[i]);
 526:	0e 94 86 02 	call	0x50c	; 0x50c <Uart_TxChar>
		i++;
 52a:	cf 5f       	subi	r28, 0xFF	; 255
	while(((UCSRA >> RXC)&1) == 0);  // • Bit 7 – RXC: USART Receive Complete
	return UDR ;
}
void Uart_TxString(char * string){
	unsigned char i=0;
	while(string[i] !='\0'){
 52c:	f8 01       	movw	r30, r16
 52e:	ec 0f       	add	r30, r28
 530:	f1 1d       	adc	r31, r1
 532:	80 81       	ld	r24, Z
 534:	81 11       	cpse	r24, r1
 536:	f7 cf       	rjmp	.-18     	; 0x526 <Uart_TxString+0x12>
		Uart_TxChar(string[i]);
		i++;
	}
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	08 95       	ret

00000540 <__itoa_ncheck>:
 540:	bb 27       	eor	r27, r27
 542:	4a 30       	cpi	r20, 0x0A	; 10
 544:	31 f4       	brne	.+12     	; 0x552 <__itoa_ncheck+0x12>
 546:	99 23       	and	r25, r25
 548:	22 f4       	brpl	.+8      	; 0x552 <__itoa_ncheck+0x12>
 54a:	bd e2       	ldi	r27, 0x2D	; 45
 54c:	90 95       	com	r25
 54e:	81 95       	neg	r24
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	0c 94 ac 02 	jmp	0x558	; 0x558 <__utoa_common>

00000556 <__utoa_ncheck>:
 556:	bb 27       	eor	r27, r27

00000558 <__utoa_common>:
 558:	fb 01       	movw	r30, r22
 55a:	55 27       	eor	r21, r21
 55c:	aa 27       	eor	r26, r26
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	aa 1f       	adc	r26, r26
 564:	a4 17       	cp	r26, r20
 566:	10 f0       	brcs	.+4      	; 0x56c <__utoa_common+0x14>
 568:	a4 1b       	sub	r26, r20
 56a:	83 95       	inc	r24
 56c:	50 51       	subi	r21, 0x10	; 16
 56e:	b9 f7       	brne	.-18     	; 0x55e <__utoa_common+0x6>
 570:	a0 5d       	subi	r26, 0xD0	; 208
 572:	aa 33       	cpi	r26, 0x3A	; 58
 574:	08 f0       	brcs	.+2      	; 0x578 <__utoa_common+0x20>
 576:	a9 5d       	subi	r26, 0xD9	; 217
 578:	a1 93       	st	Z+, r26
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	79 f7       	brne	.-34     	; 0x55c <__utoa_common+0x4>
 57e:	b1 11       	cpse	r27, r1
 580:	b1 93       	st	Z+, r27
 582:	11 92       	st	Z+, r1
 584:	cb 01       	movw	r24, r22
 586:	0c 94 c5 02 	jmp	0x58a	; 0x58a <strrev>

0000058a <strrev>:
 58a:	dc 01       	movw	r26, r24
 58c:	fc 01       	movw	r30, r24
 58e:	67 2f       	mov	r22, r23
 590:	71 91       	ld	r23, Z+
 592:	77 23       	and	r23, r23
 594:	e1 f7       	brne	.-8      	; 0x58e <strrev+0x4>
 596:	32 97       	sbiw	r30, 0x02	; 2
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <strrev+0x18>
 59a:	7c 91       	ld	r23, X
 59c:	6d 93       	st	X+, r22
 59e:	70 83       	st	Z, r23
 5a0:	62 91       	ld	r22, -Z
 5a2:	ae 17       	cp	r26, r30
 5a4:	bf 07       	cpc	r27, r31
 5a6:	c8 f3       	brcs	.-14     	; 0x59a <strrev+0x10>
 5a8:	08 95       	ret

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
